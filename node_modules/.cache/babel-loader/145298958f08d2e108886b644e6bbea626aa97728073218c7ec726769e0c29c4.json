{"ast":null,"code":"import { $authHost, $host } from \".\";\nimport { jwtDecode } from \"jwt-decode\";\nexport const registration = async (name, surname, email, phone_num, password, permission) => {\n  const {\n    data\n  } = await $host.post('api/users/registration', {\n    name,\n    surname,\n    email,\n    phone_num,\n    password,\n    permission\n  });\n  localStorage.setItem('token', data.token);\n  return jwtDecode(data.token);\n};\nexport const login = async (email, password) => {\n  const {\n    data\n  } = await $host.post('api/users/login', {\n    email,\n    password\n  });\n  localStorage.setItem('token', data.token);\n  return jwtDecode(data.token);\n};\nexport const check = async () => {\n  const {\n    data\n  } = await $authHost.get('api/users/auth');\n  localStorage.setItem('token', data.token);\n  return jwtDecode(data.token);\n};\nexport const fetchUsers = async () => {\n  const {\n    data\n  } = await $authHost.get('api/users');\n  return data;\n};\nexport const updateUserRole = async (id, permission) => {\n  const {\n    data\n  } = await $authHost.put(`api/users/${id}`, {\n    permission\n  });\n  return data;\n};\nexport const updateUser = async (id, updatedUserData) => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Токен авторизации не найден');\n    }\n    const response = await $authHost.patch(`api/users/${id}`, updatedUserData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["$authHost","$host","jwtDecode","registration","name","surname","email","phone_num","password","permission","data","post","localStorage","setItem","token","login","check","get","fetchUsers","updateUserRole","id","put","updateUser","updatedUserData","getItem","Error","response","patch","headers","error"],"sources":["D:/Psych-narc/client/src/http/userAPI.js"],"sourcesContent":["import { $authHost, $host } from \".\";\r\nimport {jwtDecode} from \"jwt-decode\"\r\n\r\nexport const registration = async (name, surname, email, phone_num, password, permission) => {\r\n    const  {data} = await $host.post('api/users/registration', {name, surname, email, phone_num, password, permission})\r\n    localStorage.setItem('token', data.token)\r\n    return jwtDecode(data.token)\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n    const {data} = await $host.post('api/users/login', {email, password})\r\n    localStorage.setItem('token', data.token)\r\n    return jwtDecode(data.token)\r\n}\r\n\r\nexport const check = async () => {\r\n    const {data} = await $authHost.get('api/users/auth')\r\n    localStorage.setItem('token', data.token)\r\n    return jwtDecode(data.token)\r\n}\r\n\r\nexport const fetchUsers = async () => {\r\n    const { data } = await $authHost.get('api/users');\r\n    return data;\r\n};\r\n\r\nexport const updateUserRole = async (id, permission) => {\r\n    const { data } = await $authHost.put(`api/users/${id}`, { permission });\r\n    return data;\r\n};\r\n\r\nexport const updateUser = async (id, updatedUserData) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n  \r\n      if (!token) {\r\n        throw new Error('Токен авторизации не найден');\r\n      }\r\n  \r\n      const response = await $authHost.patch(`api/users/${id}`, updatedUserData, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n  \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,GAAG;AACpC,SAAQC,SAAS,QAAO,YAAY;AAEpC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,KAAK;EACzF,MAAO;IAACC;EAAI,CAAC,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,wBAAwB,EAAE;IAACP,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAU,CAAC,CAAC;EACnHG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,OAAOZ,SAAS,CAACQ,IAAI,CAACI,KAAK,CAAC;AAChC,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOT,KAAK,EAAEE,QAAQ,KAAK;EAC5C,MAAM;IAACE;EAAI,CAAC,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,iBAAiB,EAAE;IAACL,KAAK;IAAEE;EAAQ,CAAC,CAAC;EACrEI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,OAAOZ,SAAS,CAACQ,IAAI,CAACI,KAAK,CAAC;AAChC,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAM;IAACN;EAAI,CAAC,GAAG,MAAMV,SAAS,CAACiB,GAAG,CAAC,gBAAgB,CAAC;EACpDL,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,OAAOZ,SAAS,CAACQ,IAAI,CAACI,KAAK,CAAC;AAChC,CAAC;AAED,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM;IAAER;EAAK,CAAC,GAAG,MAAMV,SAAS,CAACiB,GAAG,CAAC,WAAW,CAAC;EACjD,OAAOP,IAAI;AACf,CAAC;AAED,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAOC,EAAE,EAAEX,UAAU,KAAK;EACpD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMV,SAAS,CAACqB,GAAG,CAAE,aAAYD,EAAG,EAAC,EAAE;IAAEX;EAAW,CAAC,CAAC;EACvE,OAAOC,IAAI;AACf,CAAC;AAED,OAAO,MAAMY,UAAU,GAAG,MAAAA,CAAOF,EAAE,EAAEG,eAAe,KAAK;EACrD,IAAI;IACF,MAAMT,KAAK,GAAGF,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACV,KAAK,EAAE;MACV,MAAM,IAAIW,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,QAAQ,GAAG,MAAM1B,SAAS,CAAC2B,KAAK,CAAE,aAAYP,EAAG,EAAC,EAAEG,eAAe,EAAE;MACzEK,OAAO,EAAE;QACP,eAAe,EAAG,UAASd,KAAM;MACnC;IACF,CAAC,CAAC;IAEF,OAAOY,QAAQ,CAAChB,IAAI;EACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}